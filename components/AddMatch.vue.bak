<template lang="pug">
v-card
  v-form(v-model='valid', @submit.prevent='onSubmit')
    v-card-title.py-0
      CircleLoader(
        :loading='true',
        color='grey',
        :size='36',
        sizeUnit='px'
        @click='fullfillForm'
      )
      v-divider.mx-3(vertical, inset)
      v-combobox(
        dense
        v-model='tournamentName'
        :items='["BISFed 2019 Zagreb", "BISFed 2019 Guangzhou Boccia", "BISFed 2019 Montreal Boccia"]'
        color='backpurple'
        hide-no-data
        hide-selected
        label='Tournament name'
        :hint='tournamentName ? `Type: <span class="body-2">${tournamentTypes.find(x => x.value === tournamentType).name}</span>` : "Choose or enter tournament name..."'
        :rules='requiredField'
        persistent-hint
        return-object
        open-on-clear
        autofocus
        clearable
      )
    v-card-text.py-0(style='font-size:18px;')
      scroll-picker(
        v-model='tournamentType',
        :options='tournamentTypes',
        :drag-sensitivity="0.5"
        :touch-sensitivity="0.5"
        :scroll-sensitivity="0.5"
      )
    v-card-text.py-0
      v-btn-toggle(v-model='competition', mandatory)
        v-btn.font-weight-bold(
          large,
          value='Individual',
          :class='competition==="Individual" ? activeCompetitionClass : ""'
        )
          | Individual
          v-icon.mdi-36px(right) mdi-account
        v-btn.font-weight-bold.mx-2(
          large,
          value='Pair',
          :class='competition==="Pair" ? activeCompetitionClass : ""'
        )
          | Pair
          v-icon.mdi-36px(right) mdi-account-supervisor
        v-btn.font-weight-bold(
          large,
          value='Team',
          :class='competition==="Team" ? activeCompetitionClass : ""'
        )
          | Team
          v-icon.mdi-36px(right) mdi-account-group
      v-item-group.mt-3(v-model='division', mandatory)
        v-flex(layout, justify-center)
          v-item(
            v-for='divi in divisions',
            :key='divi.value'
            :value='divi.value'
          )
            v-chip(
              slot-scope="{ active, toggle }",
              :selected="active",
              @click.prevent="toggle"
              :color='active ? activeDivisionClass : ""'
            )
              v-icon.mdi-36px(left, color='grey lighten-3') mdi-dlna
              span.font-weight-bold {{ divi.name }}
    v-card-text.py-0
      scroll-picker-group(class='flex', style="font-size:18px;")
        scroll-picker(
          v-model='stage',
          :options='stageTypes'
          :drag-sensitivity="0.5"
          :touch-sensitivity="0.5"
          :scroll-sensitivity="0.5"
        )
        scroll-picker(
          v-model='stageIndex',
          :options='stageIndexes'
          :drag-sensitivity="0.5"
          :touch-sensitivity="0.5"
          :scroll-sensitivity="0.5"
        )
    v-card-actions
      v-btn.secondary.secondary--text(round, block, outline, @click='$router.push("/")')
        v-icon.mdi-18px(left) mdi-reply
        | {{ $t('forms.cancel') }}
      v-btn.warning.warning--text(round, block, outline, type='submit', :loading='isLoading', :disabled='!valid')
        | {{ $t('forms.next') }}
        v-icon.mdi-18px(right) mdi-arrow-right-drop-circle-outline
</template>

<script lang="ts">
import { Component, Watch, Vue } from 'vue-property-decorator'
import { State, Mutation } from 'vuex-class'

import { ScrollPicker, ScrollPickerGroup } from 'vue-scroll-picker'
import 'vue-scroll-picker/dist/style.css'

import ValidateRules from '~/mixins/validate'

import enums from '~/assets/enums'

interface obj {
  value: number,
  name: string
}

@Component({
  mixins: [ValidateRules],
  components: {
    ScrollPicker,
    ScrollPickerGroup
  }
})
export default class AddMatch extends Vue {
  $bus
  tournamentTypes: Array<obj> = enums.tournamentTypes
  competitionTypes: Array<string> = enums.competitionTypes
  stageTypes: Array<string> = enums.stageTypes

  valid: Boolean = false
  isLoading: Boolean = false

  search!: string

  tournamentName!: string
  tournamentType: number = 2
  competition: string = 'Individual'
  division: number = 4
  stage: string = 'Pool'
  stageIndex: number = 1

  @State('match') stateMatch
  @Mutation('setMatch') mutationSetMatch

  created () {
    const storedMatch = this.stateMatch
    if (Object.getOwnPropertyNames(storedMatch).length !== 0) {
      const {
        tournamentName,
        tournamentType,
        competition,
        division,
        stage,
        stageIndex
      } = storedMatch

      this.tournamentName = tournamentName
      this.tournamentType = tournamentType
      this.competition = competition
      this.division = division
      this.stage = stage
      this.stageIndex = stageIndex
    }
  }

  onSubmit (): void {
    this.isLoading = true

    this.mutationSetMatch({
      tournamentName: this.tournamentName,
      tournamentType: this.tournamentType,
      competition: this.competition,
      division: this.division,
      stage: this.stage,
      stageIndex: this.stageIndex
    })

    setTimeout(() => {
      this.isLoading = false
      this.$bus.$emit('setPlayers')
    }, 680)
  }

  get tournamentTypeName (): string {
    const typeIndex = this.tournamentType
    const tournamentType = this.tournamentTypes.find(x => x.value === typeIndex) || { value: null, name: '' }
    return tournamentType.name
  }

  @Watch('competition')
  onCompetitionChange (val: string) {
    if (val === 'Team') {
      this.division = enums.divisions.team[0].value
    }
  }

  get divisions (): Array<obj> {
    switch (this.competition) {
    case 'Individual': return enums.divisions.individual
    case 'Pair': return enums.divisions.pair
    case 'Team': return enums.divisions.team
    default: return []
    }
  }

  get stageIndexes (): Array<obj> {
    switch (this.stage) {
    case 'Pool': return enums.stageIndexes.pool
    case 'Elimination': return enums.stageIndexes.elimination
    default: return enums.stageIndexes.pool
    }
  }

  get activeCompetitionClass (): string {
    return 'blue-grey lighten-2 white--text'
  }

  get activeDivisionClass (): string {
    return 'light-blue lighten-3 white--text'
  }

  fullfillForm () {
    const match = {
      tournamentName: 'BISFed 2019 Zagreb',
      tournamentType: 2,
      competition: 'Team',
      division: 7,
      stage: 'Elimination',
      stageIndex: 2
    }
    Object.assign(this, { ...match })
  }
}
</script>

<style lang="stylus" scoped>
.v-btn-toggle
  >>> .v-btn:not(:last-child)
    border: none
.v-btn-toggle--selected
  box-shadow: none
</style>
